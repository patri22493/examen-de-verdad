{\rtf1\ansi\ansicpg1252\cocoartf1561\cocoasubrtf400
{\fonttbl\f0\fmodern\fcharset0 Courier;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;}
{\*\expandedcolortbl;;\cssrgb\c0\c0\c0;}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\sl280\partightenfactor0

\f0\fs24 \cf2 \expnd0\expndtw0\kerning0
#+TITLE: Examen de JavaScript\
#+AUTHOR: Patricia Cifuentes Trav\'e9\
#+DATE: \\today\
#+EMAIL: maxxcan@gmail.com\
#+OPTIONS: toc:nil \
#+LATEX_HEADER:\\usepackage[spanish]\{babel\}\
#+LaTeX_CLASS_OPTIONS: [addpoints, 12]\{exam\}\
\
\
* Qu\'e9 es un Devops\
\
:PROPERTIES:\
:points: 1\
:END:\
\
1) El cargo de una persona en una empresa.\
2) Una filosof\'eda de trabajo X\
3) El que reparte los bocadillos en la empresa\
4) Un invento americano para vender libros \
\
* Algunas de sus fases de trabajo \
:PROPERTIES:\
:points: 1\
:END:\
\
1) Integraci\'f3n continua y continuo desarrollo\
2) Desarrollo \'e1gil\
3) Comunicaci\'f3n continua \
4) Todas las anteriores X\
\
* Por qu\'e9 la documentaci\'f3n es importante\
\
:PROPERTIES:\
:points: 1\
:END:\
\
1) Evita errores\
2) Mejora los tiempos en la resoluci\'f3n de errores X\
3) Nos permite ganar el premio Nobel de Literatura\
4) Evita rupturas de amistades y relaciones amorosas (true life)\
\
* Qu\'e9 se gana con la cultura Devops \
\
:PROPERTIES:\
:points: 1\
:END:\
\
1) Los equipos que practican Devops despliegan 30 veces m\'e1s frecuente, fallan 60 veces menos y se recuperan 160 veces m\'e1s r\'e1pido X\
2) Es la anterior porque es la m\'e1s larga\
3) Es la primera porque lo dijo un t\'edo serio\
4) Cop\'f3n que s\'ed! marcar la primera \
\
* Qu\'e9 significa git clone en el control de versiones Git\
\
:PROPERTIES:\
:points: 1\
:END:\
\
1) Clonamos un repositorio X\
2) Copiamos un repositorio\
3) Creamos un repositorio nuevo en local con el contenido de otro en remoto\
4) Sincronizamos un dos repositorios\
\
* C\'f3mo agregamos a la Git todos los ficheros de un directorio\
\
:PROPERTIES:\
:points: 1  \
:END:\
\
1) Git all \
2) Git add all \
3) Git add .X\
4) Git add *\
\
* C\'f3mo creo una rama en Git \
\
:PROPERTIES:\
:points: 1 \
:END:\
\
1) Git ranch nueva-rama\
2) Git lanch nueva-rama\
3) Git branch -a nueva-rama\
4) Git branch nueva-rama X\
\
* Cu\'e1l es el comando m\'e1s r\'e1pido para hacer un commit con mensaje\
\
:PROPERTIES:\
:points: 1 \
:END:\
\
1) Git commit -mensaje \
2) Git commit -m "mensaje"X\
3) Git commit \
4) Git mueve-tu-cosita \
\
* C\'f3mo puedo ver los cambios que se produjeron en mi repositorio ayer\
\
:PROPERTIES:\
:points: 1  \
:END:\
\
\
1) Git diff \'93@\{yesterday\}" X\
2) Git diff "@(yesterday)"\
3) Git diff "#\{yesterday\}"\
4) Git diff "(yesterday)"\
\
* Con qu\'e9 comando de Git subimos un fichero al repositorio del servidor\
\
:PROPERTIES:\
:points: 1  \
:END:\
\
1) Git pull\
2) Git sube\
3) Git up\
4) Git push X\
\
* C\'f3mo se sabe quien es la persona que ha modificado un archivo\
\
:PROPERTIES:\
:points:1   \
:END:\
\
\
1) Git blame archivo X\
2) Git blame archivo\
3) Git blame archivo\
4) Git blame archivo\
5) Git blame archivo\
6) Git blame archivo\
7) Git blame archivo\
8) Git blame archivo\
\
* C\'f3mo nos descargamos un contenedor con Docker \
\
:PROPERTIES:\
:points: 1  \
:END:\
\
1) docker pull contenedor X\
2) docker search contenedor \
3) docker clone contenedor \
4) docker push contenedor \
\
* C\'f3mo ejecutamos de forma interactiva un contenedor \
\
:PROPERTIES:\
:points: 1  \
:END:\
\
1) docker run contenedor \
2) docker run contenedor -it\
3) docker run -it contenedor X\
4) docker sh -it contenedor \
\
* C\'f3mo borramos una imagen con Docker\
\
:PROPERTIES:\
:points: 0 \
:END:\
\
1) docker rm imagen X\
2) docker remove imagen\
3) docker mvi imagen \
4) docker rmi imagen \
\
* Cuantas libertades tiene el software libre\
\
:PROPERTIES:\
:points:1   \
:END:\
\
1) tres\
2) dos \
3) no tiene\
4) cuatro X\
\
* C\'f3mo creo un directorio en bash\
\
:PROPERTIES:\
:points: 1  \
:END:\
\
1) dir directorio\
2) mkdir directorio X\
3) directorio ven a mi \
4) la primera, que s\'ed, de verdad \
\
* En bash como borro un directorio\
\
:PROPERTIES:\
:points: 0 \
:END:\
\
1) rm directorio \
2) remove directorio\
3) rm -rf directorio X\
4) mkrm directorio \
\
* Una forma r\'e1pida de crear un archivo en bash\
\
:PROPERTIES:\
:points: 0  \
:END:\
\
1) touch archivo\
2) mkdir archivo\
3) cat archivo X\
4) ls archivo \
\
* Qu\'e9 es Redux \
\
:PROPERTIES:\
:points: 1  \
:END:\
\
1) Una funci\'f3n enzim\'e1tica\
2) Una librer\'eda cuyo prop\'f3sito es desplegar una aplicaci\'f3n \
3) Una librer\'eda cuyo prop\'f3sito es "controlar" el estado de nuestras aplicaciones x\
4) Una librer\'eda de javascript para reducir el consumo de las aplicaciones\
\
* Cual es el mejor sistema operativo del mundo \
\
:PROPERTIES:\
:points: 1   \
:END:\
\
1) Linux\
2) GNU/Linux X\
3) Cualquiera de las anteriores \
\
* Resultados \
\
#+BEGIN_SRC emacs-lisp \
(setq total-points 0)    ; counter for the total points\
\
;; now loop over headlines\
(org-element-map \
    (org-element-parse-buffer 'headline) 'headline \
  ;; function to print headline title and points\
  (lambda (headline) \
    (let ((points (org-element-property :POINTS headline))\
          (title  (org-element-property :title headline)))\
      (if points (progn\
                   (setq total-points (+ total-points (string-to-number points)))\
                   (princ (format "title=%s\\nPOINTS=%s\\n\\n" title points)))))))\
\
(princ (format "Puntos totales = %s" total-points))\
#+END_SRC\
}